// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId                 String                  @id @default(uuid())
  email                  String                  @unique
  name                   String?
  firstName              String?
  lastName               String?
  hash                   String?
  sub                    String?
  userType               String                  @default("local")
  profileRoles           ProfileRoles[]          @default([])
  phoneNumber            String?
  profileImage           String?
  emailVerifiedAt        DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userStatus             ActiveStatus?           @default(Active)
  carts                  Carts[]
  roleId                 String
  role                   UserRoles               @relation(fields: [roleId], references: [id])
  favoriteProducts       FavoriteUserProducts[]
  adminProfile           AdminProfile[]
  orders                 Orders[]
  addresses              CustomerAddress[]
  Bookings               Bookings[]
  userProfile            UserProfiles?
  onBoardingUserProfiles OnBoardingUserProfiles?
  senderConversations    Conversations[]         @relation("Sender")
  receiverConversations  Conversations[]         @relation("Receiver")
  orgUsers               OrgUsers[]
  teamUsers              TeamUsers[]
  invitedUsers           Invites[]
}

model Conversations {
  conversationId String     @id @default(uuid())
  messages       Messages[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  senderId       String
  receiverId     String
  sender         Users      @relation("Sender", fields: [senderId], references: [userId])
  receiver       Users      @relation("Receiver", fields: [receiverId], references: [userId])
}

model Messages {
  messageId      String        @id @default(uuid())
  senderId       String
  receiverId     String
  content        String
  isRead         Boolean       @default(false)
  conversation   Conversations @relation(fields: [conversationId], references: [conversationId], onDelete: Cascade)
  conversationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Products {
  productId       String                 @id @default(uuid())
  productImageUrl String[]
  title           String                 @unique
  description     String?
  shippingDetails String?
  saleStartDate   DateTime?
  saleEndDate     DateTime?
  brand           String
  friendlyId      String                 @unique
  quantity        Int
  msrpPrice       Float
  salePrice       Float
  categories      Category[]             @relation("ProductCategories")
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  cartItems       CartItems[]
  favoriteUsers   FavoriteUserProducts[]
  orderItems      OrderItems[]
}

model FavoriteUserProducts {
  user      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId String

  @@id([userId, productId])
}

model Carts {
  id        String      @id @default(uuid())
  user      Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    String      @unique
  cartItems CartItems[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItems {
  id        String   @id @default(uuid())
  product   Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId String
  cart      Carts    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  categoryId  String     @id @default(uuid())
  name        String     @unique
  parentId    String?    @default(uuid())
  parent      Category?  @relation("ParentCategory", fields: [parentId], references: [categoryId], onDelete: Cascade)
  subCategory Category[] @relation("ParentCategory")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[] @relation("ProductCategories")
  services    Services[] @relation("ServiceCategories")
}

model UserRoles {
  id        String      @id @default(uuid())
  name      String      @unique
  users     Users[]
  teamUsers TeamUsers[]
  orgUsers  OrgUsers[]
  invites   Invites[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Organizations {
  id            String     @id @default(uuid())
  name          String
  website       String
  orgFriendlyId String     @unique
  teams         Teams[]
  orgUsers      OrgUsers[]
  invites       Invites[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([name, website])
}

model OrgUsers {
  id            String        @id @default(uuid())
  orgId         String
  organizations Organizations @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userId        String
  users         Users         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  roleId        String
  role          UserRoles     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  joinedAt      DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([orgId, userId])
}

model Invites {
  id            String         @id @default(uuid())
  email         String
  invitedUserId String
  user          Users          @relation(fields: [invitedUserId], references: [userId], onDelete: Cascade)
  inviteType    InviteType
  inviteCode    String
  status        InviteStatus
  roleId        String
  role          UserRoles      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  orgId         String?
  organization  Organizations? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  teamId        String?
  team          Teams?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([inviteCode])
}

model Teams {
  id           String        @id @default(uuid())
  name         String
  orgId        String
  organization Organizations @relation(fields: [orgId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  teamUsers    TeamUsers[]
  invites      Invites[]

  @@unique([orgId, name])
}

model TeamUsers {
  id     String    @id @default(uuid())
  teamId String
  team   Teams     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId String
  users  Users     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  roleId String
  role   UserRoles @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Inquiries {
  inquiryId String         @id @default(uuid())
  firstName String
  lastName  String
  email     String
  phone     String
  reason    String
  status    InquiryStatus?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model AdminProfile {
  adminProfileId            String                    @id @default(uuid())
  userId                    String                    @unique
  user                      Users                     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  email                     String?
  phone                     String?
  orderCancelEmail          Boolean?                  @default(false)
  orderCancelEmailSchedule  NotificationScheduleEnum?
  orderCancelSmsSchedule    NotificationScheduleEnum?
  orderCancelSms            Boolean?                  @default(false)
  lowInventoryEmail         Boolean?                  @default(false)
  lowInventoryEmailSchedule NotificationScheduleEnum?
  lowInventorySmsSchedule   NotificationScheduleEnum?
  lowInventorySms           Boolean?                  @default(false)
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
}

model AdminNotifications {
  notificationId String                @id @default(uuid())
  message        String
  type           AdminNotificationEnum
  data           Json?
  read           Boolean               @default(false)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
}

model Orders {
  orderId                     String            @id @default(uuid())
  user                        Users             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                      String
  orderStatus                 OrderStatus       @default(Pending)
  firstName                   String?
  lastName                    String?
  address                     String?
  city                        String?
  state                       String?
  zipCode                     String?
  shippingType                ShippingTypeEnum
  email                       String?
  phone                       String?
  shippingNotes               String?
  shippingCost                Float?
  discount                    Float?
  total                       Float
  subTotal                    Float
  isSameAsShippingInformation Boolean           @default(false)
  createdAt                   DateTime          @default(now())
  paymentStatus               PaymentStatusEnum @default(Pending)
  payments                    Payments[]
  updatedAt                   DateTime          @updatedAt
  orderItems                  OrderItems[]
  billingAddress              Json?
}

model OrderItems {
  orderItemId String   @id @default(uuid())
  order       Orders   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId     String
  product     Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
  productId   String
  price       Float
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payments {
  paymentId          String            @id @default(uuid())
  paymentSessionId   String            @unique
  order              Orders?           @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId            String?
  amount             Float
  transactionId      String?
  transactionDetails Json?
  status             PaymentStatusEnum
  Bookings           Bookings?         @relation(fields: [bookingsBookingId], references: [bookingId], onDelete: Cascade)
  bookingsBookingId  String?
}

model Services {
  serviceId                String     @id @default(uuid())
  companyName              String
  friendlyId               String     @unique
  serviceName              String
  description              String?
  imageUrls                String[]
  categories               Category[] @relation("ServiceCategories")
  price                    Float
  msrp                     Float
  saleStartDate            DateTime?
  saleEndDate              DateTime?
  duration                 Int?
  limitOfBookingsPerDay    Int?
  weeklyHours              Json?
  additionalDetails        String?
  adminNotes               String?
  dateSpecificAvailability Json?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  bookings                 Bookings[]
}

model Bookings {
  bookingId        String            @id @default(uuid())
  user             Users             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId           String
  service          Services          @relation(fields: [serviceId], references: [serviceId], onDelete: Cascade)
  serviceId        String
  bookingDate      DateTime
  startTime        DateTime
  endTime          DateTime
  duration         Int?
  firstName        String
  lastName         String
  email            String
  phone            String
  address          String?
  city             String?
  state            String?
  zipCode          String?
  contactFirstName String?
  contactLastName  String?
  contactEmail     String?
  contactPhone     String?
  contactAddress   String?
  contactCity      String?
  contactState     String?
  contactZipCode   String?
  bookingNotes     String?
  adminNotes       String?
  status           BookingStatusEnum
  paymentStatus    PaymentStatusEnum @default(Pending)
  payments         Payments[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum BookingStatusEnum {
  Pending
  Confirmed
  Cancelled
  Completed
}

enum ShippingTypeEnum {
  Standard
  OverNight
}

enum PaymentStatusEnum {
  Succeeded
  Failed
  Pending
  Refunded
  Cancelled
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  InTransit
  Completed
  Cancelled
  Confirmed
}

enum InquiryStatus {
  Pending
  Addressed
  Closed
}

enum NotificationScheduleEnum {
  Daily
  Instantly
}

enum AdminNotificationEnum {
  UserSignUp
  Inquiry
  OrderStatusChanged
  PasswordChanged
  PasswordReset
  Inventory
  Return
}

model CustomerAddress {
  addressId String   @id @default(uuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  firstName String?
  lastName  String?
  apartment String?
  state     String
  city      String
  zipCode   String
  primary   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, primary], name: "UniqueUserPrimaryAddress")
}

// Enums
enum GenderIdentity {
  Male
  Female
  Other
  NotToSay
}

enum ActiveStatus {
  Active
  DeActive
}

enum CompletionStatusEnum {
  Pending
  Completed
  InProgress
}

enum ThemeModeEnum {
  dark
  light
  auto
}

enum InviteType {
  Organization
  Team
}

enum InviteStatus {
  Pending
  Expired
}

enum UseCaseTypes {
  Individual
  Business
  Both
  None
}

enum BusinessTypes {
  PaintSupplier
  BusinessPartner
  ColorConsultant
  Other
}

enum ProfileRoles {
  MasterOfHues
  PigmentWizard
  ShadeGuru
  ContentCreator
  ThreeDDesigner
  SpectrumExplorer
}

// UserProfiles model
model UserProfiles {
  id                    String               @id @default(uuid())
  useCaseType           UseCaseTypes?        @default(None)
  businessType          BusinessTypes?
  profileImageUrl       String?
  fullName              String?
  firstName             String?
  lastName              String?
  companyName           String?
  phoneNumber           String?
  emailAddress          String?
  city                  String?
  state                 String?
  countryRegion         String?
  postalCode            String?
  genderIdentity        GenderIdentity?
  race                  String[]
  militaryVeteran       String?
  linkedInURL           String?
  websiteURL            String?
  githubURL             String?
  mediumURL             String?
  stackOverflowURL      String?
  calendarLink          String?
  tiraUsedFor           String?
  businessName          String?
  businessCity          String?
  businessState         String?
  businessCountryRegion String?
  businessPostalCode    String?
  addressLine1          String?
  addressLine2          String?
  businessLinkedInURL   String?
  businessUrl           String?
  businessEmail         String?
  businessIndustry      String?
  personalizedContent   String[]
  personalizedServices  String[]
  onboardingPlan        String?
  onboardingCompleted   Boolean?             @default(false)
  onboardingStep        Int?
  completedSteps        String?
  themeMode             ThemeModeEnum?
  status                CompletionStatusEnum @default(Pending)
  user                  Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                String               @unique
}

model OnBoardingUserProfiles {
  id                    String               @id @default(uuid())
  useCaseType           UseCaseTypes?        @default(None)
  businessType          BusinessTypes?
  profileImageUrl       String?
  fullName              String?
  firstName             String?
  lastName              String?
  companyName           String?
  phoneNumber           String?
  emailAddress          String?
  city                  String?
  state                 String?
  countryRegion         String?
  postalCode            String?
  genderIdentity        GenderIdentity?
  race                  String[]
  militaryVeteran       String?
  linkedInURL           String?
  websiteURL            String?
  githubURL             String?
  mediumURL             String?
  stackOverflowURL      String?
  calendarLink          String?
  businessName          String?
  businessCity          String?
  businessState         String?
  businessCountryRegion String?
  businessPostalCode    String?
  addressLine1          String?
  addressLine2          String?
  businessLinkedInURL   String?
  businessUrl           String?
  businessEmail         String?
  businessIndustry      String?
  onboardingPlan        String?
  onboardingCompleted   Boolean?             @default(false)
  onboardingStep        Int?
  completedSteps        String?
  themeMode             ThemeModeEnum?
  status                CompletionStatusEnum @default(Pending)
  user                  Users                @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId                String               @unique
}
